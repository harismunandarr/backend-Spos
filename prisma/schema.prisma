// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Users {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  password        String        
  categories      Categories[]
  orders          Orders[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Categories {
  id              Int           @id @default(autoincrement())
  name            String
  users           Users?        @relation(fields: [users_id], references: [id])
  users_id        Int?
  product         Products[] 
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Products {
  id              Int           @id @default(autoincrement())
  name            String
  price           Int
  image           String
  categories      Categories    @relation(fields: [categories_id], references: [id], onDelete: Cascade)
  categories_id   Int
  order_details   Order_Details[]  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt     
}

model Orders {
  id              Int           @id @default(autoincrement())
  invoice_no      String        @unique
  total           Int
  payment         Int
  changes         Int
  order_details   Order_Details[]
  users           Users?        @relation(fields: [users_id], references: [id])
  users_id        Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Order_Details {
  id              Int           @id @default(autoincrement())
  orders          Orders        @relation(fields: [orders_id], references: [id])
  orders_id       Int
  products        Products       @relation(fields: [products_id], references: [id])
  products_id     Int
  qty             Int
  price           Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
